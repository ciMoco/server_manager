<!DOCTYPE html>
<html lang="zh-CN">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÊúçÂä°Âô®ÊâπÈáèÁÆ°ÁêÜÂπ≥Âè∞</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
            color: #333;
        }

        .main-container {
            max-width: 1200px;
            margin: 30px auto;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, #2c3e50 0%, #4ca1af 100%);
            color: white;
            text-align: center;
            padding: 40px 0;
            position: relative;
            overflow: hidden;
        }

        .header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" preserveAspectRatio="none"><path d="M0,0 L100,0 L100,100 Z" fill="rgba(255,255,255,0.1)"/></svg>');
            background-size: 100% 100%;
        }

        .header h1 {
            margin: 0;
            font-size: 36px;
            font-weight: 700;
            text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.3);
            position: relative;
        }

        .header p {
            margin-top: 10px;
            font-size: 18px;
            opacity: 0.9;
            position: relative;
        }

        .nav {
            display: flex;
            background-color: #34495e;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .nav-item {
            flex: 1;
            text-align: center;
            padding: 15px 0;
            color: white;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

        .nav-item:hover {
            background-color: #2c3e50;
        }

        .nav-item.active {
            background-color: #2c3e50;
        }

        .nav-item.active::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            width: 100%;
            height: 3px;
            background: linear-gradient(90deg, #3498db, #2ecc71);
        }

        .tab-content {
            padding: 30px;
            display: none;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 16px;
            transition: all 0.3s ease;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #3498db;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.2);
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #2980b9 0%, #2573a7 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .btn-danger {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
            color: white;
        }

        .btn-danger:hover {
            background: linear-gradient(135deg, #c0392b 0%, #a93226 100%);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
        }

        .server-list {
            margin-top: 20px;
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 20px;
        }

        .server-card {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            border-left: 4px solid #3498db;
            display: flex;
            flex-direction: column;
        }

        .server-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .server-card h3 {
            margin: 0 0 10px 0;
            color: #2c3e50;
            font-size: 20px;
        }

        .server-card p {
            margin: 5px 0;
            color: #7f8c8d;
        }

        .server-info {
            flex: 1;
            margin-bottom: 15px;
        }

        .server-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: auto;
        }

        .result-container {
            margin-top: 30px;
        }

        .result-item {
            background-color: #fff;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
            border-left: 4px solid #2ecc71;
        }

        .result-item.error {
            border-left-color: #e74c3c;
        }

        .result-item h4 {
            margin: 0 0 15px 0;
            color: #2c3e50;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .result-item pre {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            font-family: 'Consolas', monospace;
            font-size: 14px;
            margin: 10px 0;
            border: 1px solid #eee;
        }

        .result-item pre.error {
            background-color: #fff5f5;
            border-color: #ffd1d1;
            color: #e74c3c;
        }

        .alert {
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            animation: slideDown 0.3s ease;
            position: relative;
            padding-right: 40px;
        }

        @keyframes slideDown {
            from { transform: translateY(-20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border-left: 4px solid #28a745;
        }

        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border-left: 4px solid #dc3545;
        }

        .alert::after {
            content: '√ó';
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 20px;
            cursor: pointer;
            opacity: 0.7;
        }

        .alert::after:hover {
            opacity: 1;
        }

        .checkbox-group {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 10px;
        }

        .checkbox-group label {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 8px 12px;
            background-color: #f8f9fa;
            border-radius: 5px;
            transition: all 0.2s ease;
            cursor: pointer;
            border: 1px solid #eee;
        }

        .checkbox-group label:hover {
            background-color: #e9ecef;
            border-color: #dee2e6;
        }

        .checkbox-group input[type="checkbox"] {
            width: auto;
            margin: 0;
        }

        .checkbox-group label.selected {
            background-color: #e8f4fd;
            border-color: #3498db;
        }
    </style>
</head>

<body>
    <div class="main-container">
        <div class="header">
            <h1>üñ•Ô∏è ÊúçÂä°Âô®ÊâπÈáèÁÆ°ÁêÜÂπ≥Âè∞</h1>
            <p>È´òÊïàÁÆ°ÁêÜÂ§öÂè∞ÊúçÂä°Âô®ÔºåÊâπÈáèÊâßË°åÂëΩ‰ª§</p>
        </div>
        <div class="nav">
            <div class="nav-item active" onclick="switchTab('servers')">ÊúçÂä°Âô®ÁÆ°ÁêÜ</div>
            <div class="nav-item" onclick="switchTab('execute')">ÊâπÈáèÊâßË°å</div>
            <div class="nav-item" onclick="switchTab('tasks')">‰ªªÂä°ÂéÜÂè≤</div>
            <div class="nav-item" onclick="switchTab('templates')">ÂëΩ‰ª§Ê®°Êùø</div>
            <div class="nav-item" onclick="switchTab('scheduled')">ÂÆöÊó∂‰ªªÂä°</div>
        </div>
        <div class="content">
            <!-- ÊúçÂä°Âô®ÁÆ°ÁêÜ -->
            <div id="servers" class="tab-content active">
                <h2>Ê∑ªÂä†ÊúçÂä°Âô®</h2>
                <form id="serverForm">
                    <div class="form-group">
                        <label for="serverName">ÊúçÂä°Âô®ÂêçÁß∞</label>
                        <input type="text" id="serverName" required>
                    </div>
                    <div class="form-group">
                        <label for="serverHost">‰∏ªÊú∫Âú∞ÂùÄ</label>
                        <input type="text" id="serverHost" required>
                    </div>
                    <div class="form-group">
                        <label for="serverPort">Á´ØÂè£</label>
                        <input type="number" id="serverPort" value="22" required>
                    </div>
                    <div class="form-group">
                        <label for="serverUsername">Áî®Êà∑Âêç</label>
                        <input type="text" id="serverUsername" required>
                    </div>
                    <div class="form-group">
                        <label for="serverPassword">ÂØÜÁ†Å</label>
                        <input type="password" id="serverPassword" required>
                    </div>
                    <div class="form-group">
                        <label for="serverDescription">ÊèèËø∞</label>
                        <input type="text" id="serverDescription">
                    </div>
                    <button type="submit" class="btn btn-primary">Ê∑ªÂä†ÊúçÂä°Âô®</button>
                </form>
                <h2 style="margin-top: 40px;">ÊúçÂä°Âô®ÂàóË°®</h2>
                <div id="serverList" class="server-list"></div>
            </div>
            <!-- ÊâπÈáèÊâßË°å -->
            <div id="execute" class="tab-content">
                <h2>ÊâπÈáèÊâßË°åÂëΩ‰ª§</h2>
                <form id="executeForm">
                    <div class="form-group">
                        <label for="taskName">‰ªªÂä°ÂêçÁß∞</label>
                        <input type="text" id="taskName" required>
                    </div>
                    <div class="form-group">
                        <label for="command">ÊâßË°åÂëΩ‰ª§</label>
                        <textarea id="command" rows="4" required placeholder="‰æãÂ¶Ç: df -h && free -m"></textarea>
                    </div>
                    <div class="form-group">
                        <label>ÈÄâÊã©ÊúçÂä°Âô®</label>
                        <div id="serverSelector" class="checkbox-group"></div>
                    </div>
                    <button type="submit" class="btn btn-primary">ÊâßË°åÂëΩ‰ª§</button>
                </form>
                <div id="executeResults" class="result-container"></div>
            </div>
            <!-- ‰ªªÂä°ÂéÜÂè≤ -->
            <div id="tasks" class="tab-content">
                <h2>‰ªªÂä°ÂéÜÂè≤</h2>
                <div id="taskHistory"></div>
            </div>
            <!-- ÂëΩ‰ª§Ê®°Êùø -->
            <div id="templates" class="tab-content">
                <h2>ÂàõÂª∫ÂëΩ‰ª§Ê®°Êùø</h2>
                <form id="templateForm">
                    <div class="form-group">
                        <label for="templateName">Ê®°ÊùøÂêçÁß∞</label>
                        <input type="text" id="templateName" required>
                    </div>
                    <div class="form-group">
                        <label for="templateCommand">ÂëΩ‰ª§ÂÜÖÂÆπ</label>
                        <textarea id="templateCommand" rows="4" required></textarea>
                    </div>
                    <div class="form-group">
                        <label for="templateCategory">ÂàÜÁ±ª</label>
                        <input type="text" id="templateCategory" value="general">
                    </div>
                    <div class="form-group">
                        <label for="templateDescription">ÊèèËø∞</label>
                        <input type="text" id="templateDescription">
                    </div>
                    <button type="submit" class="btn btn-primary">ÂàõÂª∫Ê®°Êùø</button>
                </form>
                <h2 style="margin-top: 40px;">ÂëΩ‰ª§Ê®°ÊùøÂàóË°®</h2>
                <div id="templateList" class="server-list"></div>
            </div>
            <!-- ÂÆöÊó∂‰ªªÂä° -->
            <div id="scheduled" class="tab-content">
                <h2>ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°</h2>
                <form id="scheduledForm">
                    <div class="form-group">
                        <label for="scheduledTaskName">‰ªªÂä°ÂêçÁß∞</label>
                        <input type="text" id="scheduledTaskName" required>
                    </div>
                    <div class="form-group">
                        <label for="scheduledCommand">ÊâßË°åÂëΩ‰ª§</label>
                        <textarea id="scheduledCommand" rows="4" required></textarea>
                    </div>
                    <div class="form-group">
                        <label>ÈÄâÊã©ÊúçÂä°Âô®</label>
                        <div id="scheduledServerSelector" class="checkbox-group"></div>
                    </div>
                    <div class="form-group">
                        <label for="cronExpression">CronË°®ËææÂºè</label>
                        <input type="text" id="cronExpression" required placeholder="‰æãÂ¶Ç: 0 0 * * *">
                    </div>
                    <button type="submit" class="btn btn-primary">ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°</button>
                </form>
                <h2 style="margin-top: 40px;">ÂÆöÊó∂‰ªªÂä°ÂàóË°®</h2>
                <div id="scheduledTaskList" class="server-list"></div>
            </div>
        </div>
    </div>
    <script>
        const API_BASE = window.location.origin;
        let servers = [];
        let selectedServers = [];
        let templates = [];
        let tasks = [];
        let scheduledTasks = [];

        // ÂàùÂßãÂåñ
        document.addEventListener('DOMContentLoaded', function() {
            // Ê∑ªÂä†È°µÈù¢Âä†ËΩΩÂä®Áîª
            showPageLoader();
            
            // ÂàùÂßãÂåñÊï∞ÊçÆ
            Promise.all([
                loadServers(),
                loadCommandTemplates(),
                loadScheduledTasks(),
                loadTaskHistory()
            ]).then(() => {
                hidePageLoader();
            }).catch(error => {
                console.error('ÂàùÂßãÂåñÊï∞ÊçÆÂ§±Ë¥•:', error);
                hidePageLoader();
                showAlert('ÂàùÂßãÂåñÊï∞ÊçÆÂ§±Ë¥•ÔºåËØ∑Âà∑Êñ∞È°µÈù¢ÈáçËØï', 'error');
            });

            // Ê≥®ÂÜå‰∫ã‰ª∂ÁõëÂê¨
            document.getElementById('serverForm').addEventListener('submit', addServer);
            document.getElementById('executeForm').addEventListener('submit', executeCommand);
            document.getElementById('templateForm').addEventListener('submit', createCommandTemplate);
            document.getElementById('scheduledForm').addEventListener('submit', createScheduledTask);
            
            // Ê∑ªÂä†ÂëΩ‰ª§Ê®°ÊùøÊêúÁ¥¢ÂäüËÉΩ
            document.getElementById('templateSearch').addEventListener('input', filterTemplates);
            
            // Ê∑ªÂä†‰ªªÂä°ÂéÜÂè≤Á≠õÈÄâÂäüËÉΩ
            document.getElementById('taskFilter').addEventListener('change', filterTasks);
        });

        // ÊòæÁ§∫È°µÈù¢Âä†ËΩΩÂä®Áîª
        function showPageLoader() {
            const loader = document.createElement('div');
            loader.id = 'page-loader';
            loader.innerHTML = `
                <div class="loader-container">
                    <div class="spinner"></div>
                    <p>Âä†ËΩΩ‰∏≠...</p>
                </div>
            `;
            document.body.appendChild(loader);
        }

        // ÈöêËóèÈ°µÈù¢Âä†ËΩΩÂä®Áîª
        function hidePageLoader() {
            const loader = document.getElementById('page-loader');
            if (loader) {
                loader.classList.add('fade-out');
                setTimeout(() => {
                    loader.remove();
                }, 500);
            }
        }

        // ÂàáÊç¢Ê†áÁ≠æÈ°µ
        function switchTab(tabName) {
            document.querySelectorAll('.nav-item').forEach(item => item.classList.remove('active'));
            document.querySelector(`.nav-item[onclick="switchTab('${tabName}')"]`).classList.add('active');

            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            document.getElementById(tabName).classList.add('active');

            // ‰øùÂ≠òÂΩìÂâçÊ†áÁ≠æÈ°µÂà∞Êú¨Âú∞Â≠òÂÇ®
            localStorage.setItem('activeTab', tabName);

            if (tabName === 'execute') {
                updateServerSelector();
            } else if (tabName === 'scheduled') {
                updateScheduledServerSelector();
            } else if (tabName === 'tasks') {
                loadTaskHistory();
            }
        }

        // Âä†ËΩΩÊúçÂä°Âô®ÂàóË°®
        async function loadServers() {
            try {
                const response = await fetch(`${API_BASE}/api/servers/`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                servers = await response.json();
                updateServerList();
                updateServerSelector();
                updateScheduledServerSelector();
                return servers;
            } catch (error) {
                console.error('Âä†ËΩΩÊúçÂä°Âô®ÂàóË°®Â§±Ë¥•:', error);
                showAlert('Âä†ËΩΩÊúçÂä°Âô®ÂàóË°®Â§±Ë¥•: ' + error.message, 'error');
                throw error;
            }
        }

        // Êõ¥Êñ∞ÊúçÂä°Âô®ÂàóË°®ÊòæÁ§∫
        function updateServerList() {
            const container = document.getElementById('serverList');
            if (servers.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">üñ•Ô∏è</div>
                        <h3>ÊöÇÊó†ÊúçÂä°Âô®</h3>
                        <p>ËØ∑Ê∑ªÂä†ÊÇ®ÁöÑÁ¨¨‰∏ÄÂè∞ÊúçÂä°Âô®</p>
                    </div>
                `;
                return;
            }
            container.innerHTML = servers.map(server => `
                <div class="server-card" data-id="${server.id}">
                    <div class="server-info">
                        <h3>${server.name}</h3>
                        <p><strong>Âú∞ÂùÄ:</strong> ${server.host}:${server.port} | <strong>Áî®Êà∑:</strong> ${server.username}</p>
                        ${server.description ? `<p><strong>ÊèèËø∞:</strong> ${server.description}</p>` : ''}
                    </div>
                    <div class="server-actions">
                        <button class="btn btn-primary" onclick="testConnection(${server.id})">ÊµãËØïËøûÊé•</button>
                        <button class="btn btn-danger" onclick="deleteServer(${server.id})">Âà†Èô§</button>
                    </div>
                </div>
            `).join('');
        }

        // ÊµãËØïÊúçÂä°Âô®ËøûÊé•
        async function testConnection(serverId) {
            const server = servers.find(s => s.id === serverId);
            if (!server) return;
            
            const serverCard = document.querySelector(`.server-card[data-id="${serverId}"]`);
            const testBtn = serverCard.querySelector('.btn-primary');
            const originalText = testBtn.textContent;
            
            testBtn.disabled = true;
            testBtn.textContent = 'ÊµãËØï‰∏≠...';
            
            try {
                const response = await fetch(`${API_BASE}/api/servers/${serverId}/test`, {
                    method: 'POST'
                });
                
                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        showAlert(`ËøûÊé•ÊàêÂäü: ${server.name}`, 'success');
                    } else {
                        showAlert(`ËøûÊé•Â§±Ë¥•: ${result.message}`, 'error');
                    }
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'ËøûÊé•ÊµãËØïÂ§±Ë¥•');
                }
            } catch (error) {
                console.error('ÊµãËØïËøûÊé•Â§±Ë¥•:', error);
                showAlert(`ÊµãËØïËøûÊé•Â§±Ë¥•: ${error.message}`, 'error');
            } finally {
                testBtn.disabled = false;
                testBtn.textContent = originalText;
            }
        }

        // Êõ¥Êñ∞ÊúçÂä°Âô®ÈÄâÊã©Âô®
        function updateServerSelector() {
            const container = document.getElementById('serverSelector');
            if (servers.length === 0) {
                container.innerHTML = '<p>ÊöÇÊó†ÂèØÁî®ÊúçÂä°Âô®ÔºåËØ∑ÂÖàÊ∑ªÂä†ÊúçÂä°Âô®</p>';
                return;
            }
            
            container.innerHTML = servers.map(server => `
                <label class="${selectedServers.includes(server.id) ? 'selected' : ''}">
                    <input type="checkbox" value="${server.id}" ${selectedServers.includes(server.id) ? 'checked' : ''} onchange="updateSelectedServers(this)">
                    ${server.name} (${server.host})
                </label>
            `).join('');
        }

        // Êõ¥Êñ∞ÈÄâ‰∏≠ÁöÑÊúçÂä°Âô®
        function updateSelectedServers(checkbox) {
            const serverId = parseInt(checkbox.value);
            const label = checkbox.parentElement;
            
            if (checkbox.checked) {
                if (!selectedServers.includes(serverId)) {
                    selectedServers.push(serverId);
                    label.classList.add('selected');
                }
            } else {
                selectedServers = selectedServers.filter(id => id !== serverId);
                label.classList.remove('selected');
            }
        }

        // Ê∑ªÂä†ÊúçÂä°Âô®
        async function addServer(event) {
            event.preventDefault();
            const form = document.getElementById('serverForm');
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            // Ë°®ÂçïÈ™åËØÅ
            const serverName = document.getElementById('serverName').value.trim();
            const serverHost = document.getElementById('serverHost').value.trim();
            const serverPort = parseInt(document.getElementById('serverPort').value);
            const serverUsername = document.getElementById('serverUsername').value.trim();
            const serverPassword = document.getElementById('serverPassword').value;
            
            if (!serverName || !serverHost || !serverUsername || !serverPassword) {
                showAlert('ËØ∑Â°´ÂÜôÊâÄÊúâÂøÖÂ°´Â≠óÊÆµ', 'error');
                return;
            }
            
            const serverData = {
                name: serverName,
                host: serverHost,
                port: serverPort,
                username: serverUsername,
                password: serverPassword,
                description: document.getElementById('serverDescription').value.trim()
            };
            
            submitBtn.disabled = true;
            submitBtn.textContent = 'Ê∑ªÂä†‰∏≠...';
            
            try {
                const response = await fetch(`${API_BASE}/api/servers/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(serverData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showAlert(`ÊúçÂä°Âô® ${result.name} Ê∑ªÂä†ÊàêÂäü!`, 'success');
                    form.reset();
                    await loadServers();
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Ê∑ªÂä†Â§±Ë¥•');
                }
            } catch (error) {
                console.error('Ê∑ªÂä†ÊúçÂä°Âô®Â§±Ë¥•:', error);
                showAlert(`Ê∑ªÂä†ÊúçÂä°Âô®Â§±Ë¥•: ${error.message}`, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        }

        // Âà†Èô§ÊúçÂä°Âô®
        async function deleteServer(serverId) {
            if (!confirm('Á°ÆÂÆöË¶ÅÂà†Èô§ËøôÂè∞ÊúçÂä°Âô®ÂêóÔºü')) return;
            
            const serverCard = document.querySelector(`.server-card[data-id="${serverId}"]`);
            if (serverCard) {
                serverCard.classList.add('deleting');
            }
            
            try {
                const response = await fetch(`${API_BASE}/api/servers/${serverId}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    showAlert('ÊúçÂä°Âô®Âà†Èô§ÊàêÂäü!', 'success');
                    await loadServers();
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Âà†Èô§Â§±Ë¥•');
                }
            } catch (error) {
                console.error('Âà†Èô§ÊúçÂä°Âô®Â§±Ë¥•:', error);
                showAlert(`Âà†Èô§ÊúçÂä°Âô®Â§±Ë¥•: ${error.message}`, 'error');
                if (serverCard) {
                    serverCard.classList.remove('deleting');
                }
            }
        }

        // ÊâßË°åÂëΩ‰ª§
        async function executeCommand(event) {
            event.preventDefault();
            const form = document.getElementById('executeForm');
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            const resultContainer = document.getElementById('executeResult');
            
            // Ë°®ÂçïÈ™åËØÅ
            const command = document.getElementById('command').value.trim();
            const selectedServers = getSelectedServers();
            
            if (!command) {
                showAlert('ËØ∑ËæìÂÖ•Ë¶ÅÊâßË°åÁöÑÂëΩ‰ª§', 'error');
                return;
            }
            
            if (selectedServers.length === 0) {
                showAlert('ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏ÄÂè∞ÊúçÂä°Âô®', 'error');
                return;
            }
            
            const executeData = {
                command: command,
                server_ids: selectedServers
            };
            
            submitBtn.disabled = true;
            submitBtn.textContent = 'ÊâßË°å‰∏≠...';
            resultContainer.innerHTML = '<div class="loading-spinner"></div><p class="text-center">ÂëΩ‰ª§ÊâßË°å‰∏≠ÔºåËØ∑Á®çÂÄô...</p>';
            
            try {
                const response = await fetch(`${API_BASE}/api/execute/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(executeData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    displayExecuteResult(result);
                    // Âà∑Êñ∞‰ªªÂä°ÂéÜÂè≤
                    await loadTaskHistory();
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'ÊâßË°åÂ§±Ë¥•');
                }
            } catch (error) {
                console.error('ÊâßË°åÂëΩ‰ª§Â§±Ë¥•:', error);
                showAlert(`ÊâßË°åÂëΩ‰ª§Â§±Ë¥•: ${error.message}`, 'error');
                resultContainer.innerHTML = `<div class="alert alert-error">ÊâßË°åÂ§±Ë¥•: ${error.message}</div>`;
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        }

        // ÊòæÁ§∫ÊâßË°åÁªìÊûú
        function displayExecuteResult(results) {
            const resultContainer = document.getElementById('executeResult');
            resultContainer.innerHTML = '';
            
            if (!results || results.length === 0) {
                resultContainer.innerHTML = '<div class="alert alert-info">Ê≤°ÊúâËøîÂõûÁªìÊûú</div>';
                return;
            }
            
            const resultHeader = document.createElement('div');
            resultHeader.className = 'result-header';
            resultHeader.innerHTML = `<h3>ÊâßË°åÁªìÊûú (${results.length}Âè∞ÊúçÂä°Âô®)</h3>`;
            resultContainer.appendChild(resultHeader);
            
            results.forEach(result => {
                const serverResult = document.createElement('div');
                serverResult.className = `server-result ${result.success ? 'success' : 'error'}`;
                
                const serverInfo = document.createElement('div');
                serverInfo.className = 'server-info';
                serverInfo.innerHTML = `
                    <h4>${result.server_name} (${result.server_host})</h4>
                    <span class="status-badge ${result.success ? 'success' : 'error'}">
                        ${result.success ? 'ÊàêÂäü' : 'Â§±Ë¥•'}
                    </span>
                `;
                
                const resultContent = document.createElement('div');
                resultContent.className = 'result-content';
                
                if (result.success) {
                    resultContent.innerHTML = `
                        <div class="output">
                            <h5>ËæìÂá∫:</h5>
                            <pre>${result.output || '(Êó†ËæìÂá∫)'}</pre>
                        </div>
                    `;
                } else {
                    resultContent.innerHTML = `
                        <div class="error-message">
                            <h5>ÈîôËØØ:</h5>
                            <pre>${result.error || 'Êú™Áü•ÈîôËØØ'}</pre>
                        </div>
                    `;
                }
                
                serverResult.appendChild(serverInfo);
                serverResult.appendChild(resultContent);
                resultContainer.appendChild(serverResult);
            });
        }

        // ÊòæÁ§∫ÊèêÁ§∫‰ø°ÊÅØ
        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type}`;
            alertDiv.textContent = message;
            const contentDiv = document.querySelector('.content');
            contentDiv.prepend(alertDiv);
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        // Âä†ËΩΩÂëΩ‰ª§Ê®°ÊùøÂàóË°®
        async function loadTemplates() {
            const templateList = document.getElementById('templateList');
            const templateSelector = document.getElementById('templateSelector');
            const searchInput = document.getElementById('templateSearch');
            const searchTerm = searchInput ? searchInput.value.toLowerCase() : '';
            
            try {
                const response = await fetch(`${API_BASE}/api/templates/`);
                if (response.ok) {
                    const templates = await response.json();
                    updateTemplateList(templates, searchTerm);
                    updateTemplateSelector(templates);
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Âä†ËΩΩÂ§±Ë¥•');
                }
            } catch (error) {
                console.error('Âä†ËΩΩÂëΩ‰ª§Ê®°ÊùøÂ§±Ë¥•:', error);
                showAlert(`Âä†ËΩΩÂëΩ‰ª§Ê®°ÊùøÂ§±Ë¥•: ${error.message}`, 'error');
                templateList.innerHTML = `<div class="alert alert-error">Âä†ËΩΩÂ§±Ë¥•: ${error.message}</div>`;
                if (templateSelector) {
                    templateSelector.innerHTML = '<option value="">-- ÈÄâÊã©Ê®°Êùø --</option>';
                }
            }
        }

        // Êõ¥Êñ∞ÂëΩ‰ª§Ê®°ÊùøÂàóË°®
        function updateTemplateList(templates, searchTerm = '') {
            const templateList = document.getElementById('templateList');
            templateList.innerHTML = '';
            
            const filteredTemplates = searchTerm 
                ? templates.filter(t => t.name.toLowerCase().includes(searchTerm) || 
                                     t.command.toLowerCase().includes(searchTerm) ||
                                     t.category.toLowerCase().includes(searchTerm))
                : templates;
            
            if (filteredTemplates.length === 0) {
                templateList.innerHTML = `
                    <div class="empty-state">
                        ${searchTerm ? 'Ê≤°ÊúâÊâæÂà∞ÂåπÈÖçÁöÑÂëΩ‰ª§Ê®°Êùø' : 'ÊöÇÊó†ÂëΩ‰ª§Ê®°Êùø'}
                        ${searchTerm ? `<button class="btn" onclick="document.getElementById('templateSearch').value=''; loadTemplates();">Ê∏ÖÈô§ÊêúÁ¥¢</button>` : ''}
                    </div>
                `;
                return;
            }
            
            // ÊåâÂàÜÁ±ªÂàÜÁªÑ
            const categorizedTemplates = {};
            filteredTemplates.forEach(template => {
                const category = template.category || 'Êú™ÂàÜÁ±ª';
                if (!categorizedTemplates[category]) {
                    categorizedTemplates[category] = [];
                }
                categorizedTemplates[category].push(template);
            });
            
            // Ê∏≤ÊüìÂàÜÁªÑÂêéÁöÑÊ®°Êùø
            Object.keys(categorizedTemplates).sort().forEach(category => {
                const categoryDiv = document.createElement('div');
                categoryDiv.className = 'template-category';
                categoryDiv.innerHTML = `<h3>${category}</h3>`;
                
                const templatesInCategory = categorizedTemplates[category];
                templatesInCategory.forEach(template => {
                    const templateCard = document.createElement('div');
                    templateCard.className = 'template-card';
                    templateCard.dataset.id = template.id;
                    
                    templateCard.innerHTML = `
                        <div class="template-header">
                            <h4>${template.name}</h4>
                            <div class="template-actions">
                                <button class="btn btn-sm" onclick="useTemplate(${template.id})">‰ΩøÁî®</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteTemplate(${template.id})">Âà†Èô§</button>
                            </div>
                        </div>
                        <div class="template-body">
                            <pre>${template.command}</pre>
                        </div>
                    `;
                    
                    categoryDiv.appendChild(templateCard);
                });
                
                templateList.appendChild(categoryDiv);
            });
        }

        // Êõ¥Êñ∞ÂëΩ‰ª§Ê®°ÊùøÈÄâÊã©Âô®
        function updateTemplateSelector(templates) {
            const templateSelector = document.getElementById('templateSelector');
            if (!templateSelector) return;
            
            templateSelector.innerHTML = '<option value="">-- ÈÄâÊã©Ê®°Êùø --</option>';
            
            // ÊåâÂàÜÁ±ªÂàÜÁªÑ
            const categorizedTemplates = {};
            templates.forEach(template => {
                const category = template.category || 'Êú™ÂàÜÁ±ª';
                if (!categorizedTemplates[category]) {
                    categorizedTemplates[category] = [];
                }
                categorizedTemplates[category].push(template);
            });
            
            // ÂàõÂª∫ÂàÜÁªÑÁöÑÈÄâÈ°π
            Object.keys(categorizedTemplates).sort().forEach(category => {
                const optgroup = document.createElement('optgroup');
                optgroup.label = category;
                
                categorizedTemplates[category].forEach(template => {
                    const option = document.createElement('option');
                    option.value = template.id;
                    option.textContent = template.name;
                    optgroup.appendChild(option);
                });
                
                templateSelector.appendChild(optgroup);
            });
        }

        // ‰ΩøÁî®ÂëΩ‰ª§Ê®°Êùø
        async function useTemplate(templateId) {
            try {
                const response = await fetch(`${API_BASE}/api/templates/${templateId}`);
                if (response.ok) {
                    const template = await response.json();
                    document.getElementById('command').value = template.command;
                    
                    // ÂàáÊç¢Âà∞ÊâßË°åÂëΩ‰ª§Ê†áÁ≠æÈ°µ
                    document.querySelector('a[href="#execute"]').click();
                    
                    // ÊªöÂä®Âà∞ÂëΩ‰ª§ËæìÂÖ•Ê°Ü
                    document.getElementById('command').scrollIntoView({ behavior: 'smooth' });
                    document.getElementById('command').focus();
                    
                    showAlert(`Â∑≤Âä†ËΩΩÊ®°Êùø: ${template.name}`, 'success');
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Âä†ËΩΩÊ®°ÊùøÂ§±Ë¥•');
                }
            } catch (error) {
                console.error('‰ΩøÁî®Ê®°ÊùøÂ§±Ë¥•:', error);
                showAlert(`‰ΩøÁî®Ê®°ÊùøÂ§±Ë¥•: ${error.message}`, 'error');
            }
        }

        // ÂàõÂª∫ÂëΩ‰ª§Ê®°Êùø
        async function createTemplate(event) {
            event.preventDefault();
            const form = document.getElementById('templateForm');
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            // Ë°®ÂçïÈ™åËØÅ
            const templateName = document.getElementById('templateName').value.trim();
            const templateCommand = document.getElementById('templateCommand').value.trim();
            const templateCategory = document.getElementById('templateCategory').value.trim();
            
            if (!templateName || !templateCommand) {
                showAlert('ËØ∑Â°´ÂÜôÊ®°ÊùøÂêçÁß∞ÂíåÂëΩ‰ª§', 'error');
                return;
            }
            
            const templateData = {
                name: templateName,
                command: templateCommand,
                category: templateCategory || 'Êú™ÂàÜÁ±ª'
            };
            
            submitBtn.disabled = true;
            submitBtn.textContent = 'ÂàõÂª∫‰∏≠...';
            
            try {
                const response = await fetch(`${API_BASE}/api/templates/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(templateData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showAlert(`Ê®°Êùø ${result.name} ÂàõÂª∫ÊàêÂäü!`, 'success');
                    form.reset();
                    await loadTemplates();
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'ÂàõÂª∫Â§±Ë¥•');
                }
            } catch (error) {
                console.error('ÂàõÂª∫Ê®°ÊùøÂ§±Ë¥•:', error);
                showAlert(`ÂàõÂª∫Ê®°ÊùøÂ§±Ë¥•: ${error.message}`, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        }

        // Âà†Èô§ÂëΩ‰ª§Ê®°Êùø
        async function deleteTemplate(templateId) {
            if (!confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ÂëΩ‰ª§Ê®°ÊùøÂêóÔºü')) return;
            
            const templateCard = document.querySelector(`.template-card[data-id="${templateId}"]`);
            if (templateCard) {
                templateCard.classList.add('deleting');
            }
            
            try {
                const response = await fetch(`${API_BASE}/api/templates/${templateId}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    showAlert('ÂëΩ‰ª§Ê®°ÊùøÂà†Èô§ÊàêÂäü!', 'success');
                    await loadTemplates();
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Âà†Èô§Â§±Ë¥•');
                }
            } catch (error) {
                console.error('Âà†Èô§Ê®°ÊùøÂ§±Ë¥•:', error);
                showAlert(`Âà†Èô§Ê®°ÊùøÂ§±Ë¥•: ${error.message}`, 'error');
                if (templateCard) {
                    templateCard.classList.remove('deleting');
                }
            }
        }

        // Êõ¥Êñ∞ÂÆöÊó∂‰ªªÂä°ÊúçÂä°Âô®ÈÄâÊã©Âô®
        function updateScheduledServerSelector() {
            const container = document.getElementById('scheduledServerSelector');
            container.innerHTML = servers.map(server => `
                <label>
                    <input type="checkbox" value="${server.id}" onchange="updateScheduledSelectedServers()">
                    ${server.name} (${server.host})
                </label>
            `).join('');
        }

        // Êõ¥Êñ∞ÈÄâ‰∏≠ÁöÑÂÆöÊó∂‰ªªÂä°ÊúçÂä°Âô®
        function updateScheduledSelectedServers() {
            selectedServers = Array.from(document.querySelectorAll('#scheduledServerSelector input:checked')).map(checkbox => parseInt(checkbox.value));
        }

        // ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°
        async function createScheduledTask(event) {
            event.preventDefault();
            if (selectedServers.length === 0) {
                showAlert('ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏ÄÂè∞ÊúçÂä°Âô®', 'error');
                return;
            }
            const scheduledData = {
                name: document.getElementById('scheduledTaskName').value,
                command: document.getElementById('scheduledCommand').value,
                server_ids: selectedServers,
                cron_expression: document.getElementById('cronExpression').value
            };
            try {
                const response = await fetch(`${API_BASE}/api/scheduled/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(scheduledData)
                });
                
                if (response.ok) {
                    showAlert('ÂÆöÊó∂‰ªªÂä°ÂàõÂª∫ÊàêÂäü!', 'success');
                    document.getElementById('scheduledForm').reset();
                    loadScheduledTasks();
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'ÂàõÂª∫Â§±Ë¥•');
                }
            } catch (error) {
                console.error('ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°Â§±Ë¥•:', error);
                showAlert(`ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°Â§±Ë¥•: ${error.message}`, 'error');
            }
        }

        // Âä†ËΩΩÂÆöÊó∂‰ªªÂä°ÂàóË°®
        async function loadScheduledTasks() {
            const taskList = document.getElementById('scheduledTaskList');
            
            try {
                const response = await fetch(`${API_BASE}/api/scheduled/`);
                if (response.ok) {
                    const tasks = await response.json();
                    updateScheduledTaskList(tasks);
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Âä†ËΩΩÂ§±Ë¥•');
                }
            } catch (error) {
                console.error('Âä†ËΩΩÂÆöÊó∂‰ªªÂä°Â§±Ë¥•:', error);
                showAlert(`Âä†ËΩΩÂÆöÊó∂‰ªªÂä°Â§±Ë¥•: ${error.message}`, 'error');
                taskList.innerHTML = `<div class="alert alert-error">Âä†ËΩΩÂ§±Ë¥•: ${error.message}</div>`;
            }
        }

        // Êõ¥Êñ∞ÂÆöÊó∂‰ªªÂä°ÂàóË°®
        function updateScheduledTaskList(tasks) {
            const taskList = document.getElementById('scheduledTaskList');
            taskList.innerHTML = '';
            
            if (tasks.length === 0) {
                taskList.innerHTML = '<div class="empty-state">ÊöÇÊó†ÂÆöÊó∂‰ªªÂä°</div>';
                return;
            }
            
            tasks.forEach(task => {
                const taskCard = document.createElement('div');
                taskCard.className = `scheduled-task-card ${task.is_active ? 'active' : 'inactive'}`;
                taskCard.dataset.id = task.id;
                
                const nextRunTime = task.next_run_time ? new Date(task.next_run_time).toLocaleString() : 'Êú™ÊéíÁ®ã';
                
                taskCard.innerHTML = `
                    <div class="task-header">
                        <h4>${task.name}</h4>
                        <div class="task-status">
                            <span class="status-badge ${task.is_active ? 'success' : 'warning'}">
                                ${task.is_active ? 'Â∑≤ÂêØÁî®' : 'Â∑≤Á¶ÅÁî®'}
                            </span>
                        </div>
                    </div>
                    <div class="task-body">
                        <div class="task-info">
                            <p><strong>ÂëΩ‰ª§:</strong> <code>${task.command}</code></p>
                            <p><strong>CronË°®ËææÂºè:</strong> <code>${task.cron_expression}</code></p>
                            <p><strong>‰∏ãÊ¨°ÊâßË°å:</strong> ${nextRunTime}</p>
                            <p><strong>ÊúçÂä°Âô®:</strong> ${task.servers.map(s => s.name).join(', ')}</p>
                        </div>
                        <div class="task-actions">
                            <button class="btn btn-sm ${task.is_active ? 'btn-warning' : 'btn-success'}" 
                                    onclick="toggleScheduledTask(${task.id}, ${!task.is_active})">
                                ${task.is_active ? 'Á¶ÅÁî®' : 'ÂêØÁî®'}
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="deleteScheduledTask(${task.id})">Âà†Èô§</button>
                        </div>
                    </div>
                `;
                
                taskList.appendChild(taskCard);
            });
        }

        // ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°
        async function createScheduledTask(event) {
            event.preventDefault();
            const form = document.getElementById('scheduledTaskForm');
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.textContent;
            
            // Ë°®ÂçïÈ™åËØÅ
            const taskName = document.getElementById('scheduledTaskName').value.trim();
            const taskCommand = document.getElementById('scheduledTaskCommand').value.trim();
            const taskCron = document.getElementById('scheduledTaskCron').value.trim();
            const selectedServers = getSelectedScheduledServers();
            
            if (!taskName || !taskCommand || !taskCron) {
                showAlert('ËØ∑Â°´ÂÜô‰ªªÂä°ÂêçÁß∞„ÄÅÂëΩ‰ª§ÂíåCronË°®ËææÂºè', 'error');
                return;
            }
            
            if (selectedServers.length === 0) {
                showAlert('ËØ∑Ëá≥Â∞ëÈÄâÊã©‰∏ÄÂè∞ÊúçÂä°Âô®', 'error');
                return;
            }
            
            const taskData = {
                name: taskName,
                command: taskCommand,
                cron_expression: taskCron,
                server_ids: selectedServers,
                is_active: true
            };
            
            submitBtn.disabled = true;
            submitBtn.textContent = 'ÂàõÂª∫‰∏≠...';
            
            try {
                const response = await fetch(`${API_BASE}/api/scheduled/`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(taskData)
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showAlert(`ÂÆöÊó∂‰ªªÂä° ${result.name} ÂàõÂª∫ÊàêÂäü!`, 'success');
                    form.reset();
                    updateScheduledSelectedServers([]);
                    await loadScheduledTasks();
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'ÂàõÂª∫Â§±Ë¥•');
                }
            } catch (error) {
                console.error('ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°Â§±Ë¥•:', error);
                showAlert(`ÂàõÂª∫ÂÆöÊó∂‰ªªÂä°Â§±Ë¥•: ${error.message}`, 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
            }
        }

        // Âà†Èô§ÂÆöÊó∂‰ªªÂä°
        async function deleteScheduledTask(taskId) {
            if (!confirm('Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™ÂÆöÊó∂‰ªªÂä°ÂêóÔºü')) return;
            
            const taskCard = document.querySelector(`.scheduled-task-card[data-id="${taskId}"]`);
            if (taskCard) {
                taskCard.classList.add('deleting');
            }
            
            try {
                const response = await fetch(`${API_BASE}/api/scheduled/${taskId}`, {
                    method: 'DELETE'
                });
                
                if (response.ok) {
                    showAlert('ÂÆöÊó∂‰ªªÂä°Âà†Èô§ÊàêÂäü!', 'success');
                    await loadScheduledTasks();
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Âà†Èô§Â§±Ë¥•');
                }
            } catch (error) {
                console.error('Âà†Èô§ÂÆöÊó∂‰ªªÂä°Â§±Ë¥•:', error);
                showAlert(`Âà†Èô§ÂÆöÊó∂‰ªªÂä°Â§±Ë¥•: ${error.message}`, 'error');
                if (taskCard) {
                    taskCard.classList.remove('deleting');
                }
            }
        }

        // ÂêØÁî®/Á¶ÅÁî®ÂÆöÊó∂‰ªªÂä°
        async function toggleScheduledTask(taskId, isActive) {
            const taskCard = document.querySelector(`.scheduled-task-card[data-id="${taskId}"]`);
            if (taskCard) {
                taskCard.classList.add('updating');
            }
            
            try {
                const response = await fetch(`${API_BASE}/api/scheduled/${taskId}/toggle`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ is_active: isActive })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showAlert(`ÂÆöÊó∂‰ªªÂä°${result.is_active ? 'ÂêØÁî®' : 'Á¶ÅÁî®'}ÊàêÂäü!`, 'success');
                    await loadScheduledTasks();
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Êìç‰ΩúÂ§±Ë¥•');
                }
            } catch (error) {
                console.error('Êõ¥Êñ∞ÂÆöÊó∂‰ªªÂä°Áä∂ÊÄÅÂ§±Ë¥•:', error);
                showAlert(`Êõ¥Êñ∞ÂÆöÊó∂‰ªªÂä°Áä∂ÊÄÅÂ§±Ë¥•: ${error.message}`, 'error');
                if (taskCard) {
                    taskCard.classList.remove('updating');
                }
            }
        }

        // Âä†ËΩΩ‰ªªÂä°ÂéÜÂè≤
        async function loadTaskHistory() {
            const historyList = document.getElementById('taskHistoryList');
            const filterSelect = document.getElementById('taskHistoryFilter');
            const filter = filterSelect ? filterSelect.value : 'all';
            
            try {
                const response = await fetch(`${API_BASE}/api/tasks/`);
                if (response.ok) {
                    const tasks = await response.json();
                    updateTaskHistoryList(tasks, filter);
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Âä†ËΩΩÂ§±Ë¥•');
                }
            } catch (error) {
                console.error('Âä†ËΩΩ‰ªªÂä°ÂéÜÂè≤Â§±Ë¥•:', error);
                showAlert(`Âä†ËΩΩ‰ªªÂä°ÂéÜÂè≤Â§±Ë¥•: ${error.message}`, 'error');
                historyList.innerHTML = `<div class="alert alert-error">Âä†ËΩΩÂ§±Ë¥•: ${error.message}</div>`;
            }
        }

        // Êõ¥Êñ∞‰ªªÂä°ÂéÜÂè≤ÂàóË°®
        function updateTaskHistoryList(tasks, filter = 'all') {
            const historyList = document.getElementById('taskHistoryList');
            historyList.innerHTML = '';
            
            // Ê†πÊçÆÁ≠õÈÄâÊù°‰ª∂ËøáÊª§‰ªªÂä°
            let filteredTasks = tasks;
            if (filter === 'success') {
                filteredTasks = tasks.filter(task => task.success);
            } else if (filter === 'failed') {
                filteredTasks = tasks.filter(task => !task.success);
            } else if (filter === 'today') {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                filteredTasks = tasks.filter(task => new Date(task.created_at) >= today);
            } else if (filter === 'week') {
                const weekAgo = new Date();
                weekAgo.setDate(weekAgo.getDate() - 7);
                filteredTasks = tasks.filter(task => new Date(task.created_at) >= weekAgo);
            }
            
            if (filteredTasks.length === 0) {
                historyList.innerHTML = `
                    <div class="empty-state">
                        ${filter !== 'all' ? 'Ê≤°ÊúâÊâæÂà∞ÂåπÈÖçÁöÑ‰ªªÂä°ËÆ∞ÂΩï' : 'ÊöÇÊó†‰ªªÂä°ÂéÜÂè≤'}
                        ${filter !== 'all' ? `<button class="btn" onclick="document.getElementById('taskHistoryFilter').value='all'; loadTaskHistory();">Êü•ÁúãÊâÄÊúâ</button>` : ''}
                    </div>
                `;
                return;
            }
            
            // ÊåâÊó∂Èó¥ÊéíÂ∫èÔºåÊúÄÊñ∞ÁöÑÂú®ÂâçÈù¢
            filteredTasks.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            
            filteredTasks.forEach(task => {
                const taskCard = document.createElement('div');
                taskCard.className = `task-history-card ${task.success ? 'success' : 'error'}`;
                taskCard.dataset.id = task.id;
                
                const createdAt = new Date(task.created_at).toLocaleString();
                const executionTime = task.execution_time ? `${task.execution_time.toFixed(2)}Áßí` : 'Êú™Áü•';
                
                taskCard.innerHTML = `
                    <div class="task-header">
                        <h4>${task.command}</h4>
                        <div class="task-status">
                            <span class="status-badge ${task.success ? 'success' : 'error'}">
                                ${task.success ? 'ÊàêÂäü' : 'Â§±Ë¥•'}
                            </span>
                        </div>
                    </div>
                    <div class="task-body">
                        <div class="task-info">
                            <p><strong>ÊâßË°åÊó∂Èó¥:</strong> ${createdAt}</p>
                            <p><strong>ËÄóÊó∂:</strong> ${executionTime}</p>
                            <p><strong>ÊúçÂä°Âô®:</strong> ${task.server_count}Âè∞</p>
                        </div>
                        <div class="task-actions">
                            <button class="btn btn-sm" onclick="viewTaskDetail(${task.id})">Êü•ÁúãËØ¶ÊÉÖ</button>
                        </div>
                    </div>
                `;
                
                historyList.appendChild(taskCard);
            });
        }

        // Êü•Áúã‰ªªÂä°ËØ¶ÊÉÖ
        async function viewTaskDetail(taskId) {
            try {
                const response = await fetch(`${API_BASE}/api/tasks/${taskId}`);
                if (response.ok) {
                    const task = await response.json();
                    showTaskDetailModal(task);
                } else {
                    const errorData = await response.json();
                    throw new Error(errorData.detail || 'Âä†ËΩΩÂ§±Ë¥•');
                }
            } catch (error) {
                console.error('Âä†ËΩΩ‰ªªÂä°ËØ¶ÊÉÖÂ§±Ë¥•:', error);
                showAlert(`Âä†ËΩΩ‰ªªÂä°ËØ¶ÊÉÖÂ§±Ë¥•: ${error.message}`, 'error');
            }
        }

        // ÊòæÁ§∫‰ªªÂä°ËØ¶ÊÉÖÊ®°ÊÄÅÊ°Ü
        function showTaskDetailModal(task) {
            // ÂàõÂª∫Ê®°ÊÄÅÊ°Ü
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3>‰ªªÂä°ËØ¶ÊÉÖ</h3>
                        <button class="close-btn" onclick="this.closest('.modal').remove()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="task-detail-header">
                            <h4>ÂëΩ‰ª§: <code>${task.command}</code></h4>
                            <p><strong>ÊâßË°åÊó∂Èó¥:</strong> ${new Date(task.created_at).toLocaleString()}</p>
                            <p><strong>ÊÄªËÄóÊó∂:</strong> ${task.execution_time ? `${task.execution_time.toFixed(2)}Áßí` : 'Êú™Áü•'}</p>
                            <p><strong>ÊÄª‰ΩìÁä∂ÊÄÅ:</strong> <span class="status-badge ${task.success ? 'success' : 'error'}">${task.success ? 'ÊàêÂäü' : 'Â§±Ë¥•'}</span></p>
                        </div>
                        <div class="task-results">
                            <h4>ÊâßË°åÁªìÊûú (${task.results.length}Âè∞ÊúçÂä°Âô®)</h4>
                            ${task.results.map(result => `
                                <div class="server-result ${result.success ? 'success' : 'error'}">
                                    <div class="server-info">
                                        <h5>${result.server_name} (${result.server_host})</h5>
                                        <span class="status-badge ${result.success ? 'success' : 'error'}">
                                            ${result.success ? 'ÊàêÂäü' : 'Â§±Ë¥•'}
                                        </span>
                                    </div>
                                    <div class="result-content">
                                        ${result.success ? `
                                            <div class="output">
                                                <h6>ËæìÂá∫:</h6>
                                                <pre>${result.output || '(Êó†ËæìÂá∫)'}</pre>
                                            </div>
                                        ` : `
                                            <div class="error-message">
                                                <h6>ÈîôËØØ:</h6>
                                                <pre>${result.error || 'Êú™Áü•ÈîôËØØ'}</pre>
                                            </div>
                                        `}
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn" onclick="this.closest('.modal').remove()">ÂÖ≥Èó≠</button>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
            
            // Ê∑ªÂä†ESCÈîÆÂÖ≥Èó≠Ê®°ÊÄÅÊ°Ü
            const closeOnEsc = (e) => {
                if (e.key === 'Escape') {
                    modal.remove();
                    document.removeEventListener('keydown', closeOnEsc);
                }
            };
            document.addEventListener('keydown', closeOnEsc);
            
            // ÁÇπÂáªÊ®°ÊÄÅÊ°ÜÂ§ñÈÉ®ÂÖ≥Èó≠
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    modal.remove();
                    document.removeEventListener('keydown', closeOnEsc);
                }
            });
        }
    </script>
</body>

</html>
    
        /* Ê®°ÊÄÅÊ°ÜÊ†∑Âºè */
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            opacity: 0;
            animation: fadeIn 0.3s ease forwards;
        }
        
        .modal-content {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            display: flex;
            flex-direction: column;
            transform: translateY(20px);
            animation: slideUp 0.3s ease forwards;
        }
        
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            border-bottom: 1px solid #eee;
        }
        
        .modal-header h3 {
            margin: 0;
            color: #333;
        }
        
        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #777;
            transition: color 0.2s;
        }
        
        .close-btn:hover {
            color: #f44336;
        }
        
        .modal-body {
            padding: 20px;
            overflow-y: auto;
            flex: 1;
        }
        
        .modal-footer {
            padding: 15px 20px;
            border-top: 1px solid #eee;
            display: flex;
            justify-content: flex-end;
        }
        
        /* ‰ªªÂä°ËØ¶ÊÉÖÊ†∑Âºè */
        .task-detail-header {
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        
        .task-results {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        /* ‰ªªÂä°ÂéÜÂè≤Âç°ÁâáÊ†∑Âºè */
        .task-history-card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 15px;
            overflow: hidden;
            transition: all 0.3s ease;
            border-left: 4px solid #ddd;
        }
        
        .task-history-card.success {
            border-left-color: #4caf50;
        }
        
        .task-history-card.error {
            border-left-color: #f44336;
        }
        
        .task-history-card:hover {
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }
        
        /* ÂÆöÊó∂‰ªªÂä°Âç°ÁâáÊ†∑Âºè */
        .scheduled-task-card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 15px;
            overflow: hidden;
            transition: all 0.3s ease;
            border-left: 4px solid #ddd;
        }
        
        .scheduled-task-card.active {
            border-left-color: #4caf50;
        }
        
        .scheduled-task-card.inactive {
            border-left-color: #ff9800;
            opacity: 0.8;
        }
        
        .scheduled-task-card:hover {
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }
        
        /* ÂëΩ‰ª§Ê®°ÊùøÂç°ÁâáÊ†∑Âºè */
        .template-category {
            margin-bottom: 25px;
        }
        
        .template-category h3 {
            margin-bottom: 15px;
            padding-bottom: 8px;
            border-bottom: 1px solid #eee;
            color: #555;
        }
        
        .template-card {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 15px;
            overflow: hidden;
            transition: all 0.3s ease;
        }
        
        .template-card:hover {
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }
        
        .template-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background-color: #f9f9f9;
            border-bottom: 1px solid #eee;
        }
        
        .template-header h4 {
            margin: 0;
            color: #333;
        }
        
        .template-actions {
            display: flex;
            gap: 8px;
        }
        
        .template-body {
            padding: 15px;
        }
        
        .template-body pre {
            margin: 0;
            white-space: pre-wrap;
            word-break: break-all;
            background-color: #f5f5f5;
            padding: 10px;
            border-radius: 4px;
            font-size: 14px;
        }
        
        /* Âä®ÁîªÊïàÊûú */
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes slideUp {
            from { transform: translateY(20px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        
        .deleting {
            animation: fadeOut 0.5s ease forwards;
        }
        
        .updating {
            opacity: 0.7;
        }
        
        @keyframes fadeOut {
            from { opacity: 1; transform: scale(1); }
            to { opacity: 0; transform: scale(0.9); }
        }
        
        /* Âä†ËΩΩÂä®Áîª */
        .loading-spinner {
            width: 40px;
            height: 40px;
            margin: 20px auto;
            border: 4px solid rgba(0, 0, 0, 0.1);
            border-radius: 50%;
            border-top-color: #3498db;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        /* Á©∫Áä∂ÊÄÅÊèêÁ§∫ */
        .empty-state {
            text-align: center;
            padding: 30px 20px;
            color: #777;
            background-color: #f9f9f9;
            border-radius: 8px;
            margin: 20px 0;
        }
        
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
            margin-top: 15px;
        }
    
        .empty-state button {
    